trigger:
  branches:
    include:
    - master

variables:
- group: ado-environments

stages:
- stage: Build
  jobs:
  
    ##################
    # BUILD SOLUTION #
    ##################
  - job: BuildAndPackage
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '6.x'
        includePreviewVersions: true
        
    - task: gitversion/setup@0
      displayName: 'Install GitVersion'
      inputs:
        versionSpec: '5.x'

    - task: gitversion/execute@0
      displayName: 'Calculate version'
      inputs:
        useConfigFile: true
        configFilePath: 'GitVersion.yml'

    - script: |
        echo "##vso[task.setvariable variable=packageVersion;isOutput=true]$(GitVersion.SemVer)"
      name: setPackageVersion
      displayName: 'Set package version variable'


    - task: DotNetCoreCLI@2
      displayName: 'dotnet build sln'
      inputs:
        command: 'build'
        projects: 'src/KTCU.CommonMicroservice.csproj'
        configuration: 'Release'
    
    - task: DotNetCoreCLI@2
      displayName: 'Publish web project'
      inputs:
        command: publish
        publishWebProjects: true
        arguments: '--configuration Release --output docker/KTCU.CommonMicroservice'
        zipAfterPublish: false

    - task: Bash@3
      displayName: Lint Dockerfile with Hadolint for best practice compliance
      inputs:
        targetType: 'inline'
        script: |        
          echo 'Downloading Hadolint to lint Dockerfile...'
          wget https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
          chmod +x hadolint-Linux-x86_64
          mv hadolint-Linux-x86_64 hadolint
                  
          echo 'Start Dockerfile lint...'
          ./hadolint ./docker/Dockerfile -f sarif | jq > hadolint-scan.sarif
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Hadolint Dockerfile Scan'
      inputs:
        pathToPublish: 'hadolint-scan.sarif'
        artifactName: 'CodeAnalysisLogs'

    - task: Docker@2
      displayName: 'Build and publish Docker image'
      inputs:
        containerRegistry: 'dockerhub-sc'
        repository: 'guidemetothemoon/common-microservice'
        command: 'buildAndPush'
        Dockerfile: 'docker/Dockerfile'
        tags: '$(GitVersion.SemVer)'

    - task: HelmInstaller@1
      inputs:
        helmVersionToInstall: 'latest'

    - task: HelmDeploy@0
      displayName: helm package common-microservice
      inputs:
        command: package
        chartPath: helm/common-microservice
        destination: helm-output
        arguments: '--version $(GitVersion.SemVer) --app-version $(GitVersion.SemVer)'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact: helm'
      inputs:
        targetPath: 'helm-output'
        artifact: 'helm'

- stage: Deploy_Dev
  dependsOn:
  - Build  
  jobs:
  - deployment: Deploy_Dev_AKS
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      packageVersion: $[ stageDependencies.Build.BuildAndPackage.outputs['setPackageVersion.packageVersion'] ]
    environment: $(ADOEnvDev).common-microservice
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current 
            artifact: helm
            displayName: 'Download artifacts from build'

          - checkout: self

          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: 'latest'

          - task: HelmDeploy@0
            displayName: 'Deploy common-microservice'
            enabled: true
            inputs:
              command: upgrade 
              namespace: 'common-microservice'
              releaseName: 'common-microservice'
              chartType: FilePath
              chartPath: $(Pipeline.Workspace)/helm/common-microservice-$(packageVersion).tgz
              arguments: '--install --timeout 2m -f $(Build.SourcesDirectory)/helm/common-microservice/values.yaml --set image.tag=$(packageVersion)'
